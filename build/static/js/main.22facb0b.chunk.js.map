{"version":3,"sources":["Data/tools.js","Components/ItemsListComponents/filterBar.js","Components/ItemsListComponents/ImagesSection.js","Components/ItemsListComponents/BackgroundsSection.js","Components/ItemsListComponents/UploadSection.js","Components/ItemsListComponents/ShareSection.js","Components/ToolsBar.js","Components/ItemsList.js","Components/ImageComponent.js","Components/CanvasBackground.js","Components/Canvas.js","App.js","index.js"],"names":["tools","id","title","icon","component","FilterBar","props","categoryArray","itemsToReturn","forEach","element","photoCategroy","photoCategory","indexOf","push","itemsWithoutDuplicates","items","className","onChange","e","target","value","map","val","i","api","WooCommerceRestApi","url","process","consumerKey","consumerSecret","version","ImagesSection","useState","setSelectedCategory","setItems","useEffect","getProductsFromWooCommerce","get","then","res","status","data","product","name","images","image","oldItems","catch","err","console","log","selectedCategory","item","src","alt","draggable","onDragStart","onChangeDragUrl","onClick","handleAddOnClick","BackgroundsSection","UploadSection","uploadedImages","setUploadedImage","window","onbeforeunload","localStorage","setItem","JSON","stringify","loadImages","parse","getItem","UploadButton","htmlFor","img","files","prevState","URL","createObjectURL","handleUpload","type","accept","hidden","UploadedImages","elementcategory","length","ShareSection","uri","stageRef","current","toDataURL","link","document","createElement","download","href","body","appendChild","click","removeChild","ToolsBar","tool","changeSelectedTool","ItemsList","selectedTools","setSelectedTools","componentsMap","imagesSection","backgroundsSection","uploadSection","shareSection","sidebarCollapse","setSidebarCollapse","resizeCanvasOnSidebarChange","Component","dragUrl","addToBackground","removeBackground","ImageComponent","shapeProps","isSelected","onSelect","useImage","shapeRef","useRef","transformRef","setNode","getLayer","batchDraw","onDrop","x","y","moveToTop","setAttrs","shadowOffset","scaleX","scaleY","shadowBlur","ShadowOpacity","onDragEnd","to","duration","shadowOffsetX","shadowOffsetY","onTap","ref","shadowColor","shadowOpacity","onTransformEnd","node","width","Math","max","height","boundBoxFunc","oldBox","newBox","CanvasBackground","backgroundUrl","background","widthRatio","heightRatio","undefined","zIndex","fillPatternImage","fillPatternRepeat","fillPatternScaleX","fillPatternScaleY","Canvas","stageWidth","stageHeight","scale","stageDimensions","setStageDimensions","containerRef","setDragUrl","setImages","backgroundImage","setBackgroundImage","selectedId","setSelectedId","handleResize","clientWidth","addEventListener","passImageWithId","centerX","centerY","concat","setTimeout","preventDefault","setPointersPositions","getPointerPosition","onDragOver","onMouseDown","clickedOnEmpty","getStage","clikedOnBackground","getId","checkDeselect","newAttrs","imagesToUpdate","singleImageToUpdate","handleTransformChange","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.22facb0b.chunk.js","sourcesContent":["import PhotoIcon from '@mui/icons-material/Photo';\nimport UploadFileRoundedIcon from \"@mui/icons-material/UploadFileRounded\";\nimport WallpaperIcon from '@mui/icons-material/Wallpaper';\nimport IosShareRoundedIcon from \"@mui/icons-material/IosShareRounded\";\n// below is list of components that appear in sidebar\n// id - unique id\n// title - title of tool\n// icon - imported icon from material ui\n// component - component string needed for conditional rendering in itemsList.js\nexport const tools = [\n  {\n    id: 0,\n    title: \"Photos\",\n    icon: <PhotoIcon />,\n    component: \"imagesSection\",\n  },\n  {\n    id: 1,\n    title: \"Backgrounds\",\n    icon: <WallpaperIcon />,\n    component: \"backgroundsSection\",\n  },\n  {\n    id: 2,\n    title: \"Uploads\",\n    icon: <UploadFileRoundedIcon />,\n    component: \"uploadSection\",\n  },\n  {\n    id: 3,\n    title: \"Share\",\n    icon: <IosShareRoundedIcon />,\n    component: \"shareSection\",\n  },\n];\n","import React from \"react\";\n\n// simple filterBar for conditional rendering images by categories in sidebar\n\nfunction FilterBar(props) {\n  // function to create array of list of uniques categories based on images categories in /Data/items.json\n  const itemsWithoutDuplicates = (itemsToReturn) => {\n    let categoryArray = [];\n    itemsToReturn.forEach((element) => {\n      let photoCategroy = element.photoCategory;\n      let isInArray = categoryArray.indexOf(photoCategroy);\n      if (isInArray === -1) {\n        categoryArray.push(photoCategroy);\n      }\n    });\n    return categoryArray;\n  };\n  const categoryArray = itemsWithoutDuplicates(props.items);\n  const handleFilterChange = (e) => {\n    props.onChange(e.target.value);\n  };\n\n  return (\n    <label className=\"categorySelectLabel\">\n      <select onChange={handleFilterChange} className=\"categorySelect\">\n        <option value=\"\">All</option>\n        {categoryArray.map((val, i) => (\n          <option key={i} value={val}>\n            {val}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n}\n\nexport default FilterBar;\n","/** @format */\n\nimport React, { useEffect, useState } from \"react\";\nimport FilterBar from \"./filterBar\";\nimport WooCommerceRestApi from \"@woocommerce/woocommerce-rest-api\";\n\nconst api = new WooCommerceRestApi({\n  url: process.env.REACT_APP_NEXT_PUBLIC_WORDPRESS_SITE,\n  consumerKey: process.env.REACT_APP_WC_CONSUMER_KEY,\n  consumerSecret: process.env.REACT_APP_WC_CONSUMER_SECRET,\n  version: \"wc/v3\",\n});\n\n// images can be dragged or clicked for adding it to canvas\n\nconst ImagesSection = (props) => {\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    getProductsFromWooCommerce();\n  }, []);\n\n  // useEffect(() => {\n  //   console.log(items);\n  // }, [items]);\n\n  // fetch images\n  const getProductsFromWooCommerce = () => {\n    setItems([]);\n    api\n      .get(\"products\")\n      .then((res) => {\n        if (res.status === 200) {\n          if (res.data) {\n            res.data.forEach((product) => {\n              if (\n                product.name !== \"Reverse Withdrawal Payment\" &&\n                product.images\n              ) {\n                product.images.forEach((image) => {\n                  setItems((oldItems) => [...oldItems, image]);\n                });\n              }\n            });\n          }\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // filter images by selected category\n  const filterImagesByCategories = (array) => {\n    let filteredArrayToReturn;\n    if (selectedCategory.length > 0) {\n      filteredArrayToReturn = array.filter(\n        (el) => el.photoCategory === selectedCategory\n      );\n      return filteredArrayToReturn;\n    }\n    return array;\n  };\n\n  return (\n    <div className=\"itemsSection\">\n      <FilterBar\n        items={items}\n        onChange={(selectedCategory) => {\n          setSelectedCategory(selectedCategory);\n        }}\n      />\n\n      <div className=\"itemsWrapper\">\n        {items.map((item, i) => (\n          <div className=\"imageContainer\" key={i}>\n            <img\n              src={item.src}\n              alt={item.alt}\n              className=\"itemsImage\"\n              draggable=\"true\"\n              // elementCategory=\"All\"\n              onDragStart={(e) => {\n                props.onChangeDragUrl(e.target.src);\n              }}\n              onClick={(e) => {\n                console.log(e.target);\n                props.handleAddOnClick(e.target.src);\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ImagesSection;\n","/** @format */\n\nimport React from \"react\";\n\nfunction BackgroundsSection(props) {\n  // const backgroundsFilteredArray = items.filter(\n  //   (el) => el.elementCategory === \"backgrounds\"\n  // );\n\n  return <></>;\n  // return (\n  //   <div className=\"itemsSection\">\n  //     <div className=\"clearBackgroundWrap\">\n  //       <span\n  //       className=\"clearBackgroundText\"\n  //       onClick={() => {\n  //         props.removeBackground();\n  //       }}\n  //       >\n  //          Click to clear background\n  //       </span>\n  //     </div>\n  //     <div className=\"itemsWrapper\">\n  //       {backgroundsFilteredArray.map((item, i) => (\n  //         <div className=\"imageContainer\" key={i}>\n  //           <img\n  //             src={item.source}\n  //             alt=\"\"\n  //             className=\"itemsImage\"\n  //             draggable=\"false\"\n  //             elementcategory={item.elementCategory}\n  //             onClick={(e) => {\n  //               props.addToBackground(e.target.src);\n  //             }}\n  //           />\n  //         </div>\n  //       ))}\n  //     </div>\n  //   </div>\n  // );\n}\n\nexport default BackgroundsSection;\n","import React, { useState, useEffect } from \"react\";\nimport UploadRoundedIcon from \"@mui/icons-material/UploadRounded\";\n\n// images can be uploaded to client side manually\n// for temporary storing data of images I used localstorage\n\nfunction UploadSection(props) {\n  const [uploadedImages, setUploadedImage] = useState([]);\n\n  // clear localstorage on tab close to prevent loading blank images\n  window.onbeforeunload = function () {\n    const emptyArray = []\n    localStorage.setItem(\"uploadedImages\", JSON.stringify(emptyArray));\n  };\n\n  // saving state to local storage to prevent deleting uploaded images after closing tab with \"uploads\"\n  useEffect(() => {\n    const loadImages = JSON.parse(localStorage.getItem(\"uploadedImages\"));\n    setUploadedImage(loadImages);\n  }, []);\n\n  // adding images to localstorage every upload\n  useEffect(() => {\n    localStorage.setItem(\n      \"uploadedImages\",\n      JSON.stringify(uploadedImages)\n    );\n  }, [uploadedImages]);\n\n  const UploadButton = () => {\n    const handleUpload = (e) => {\n      let img = e.target.files[0];\n      setUploadedImage((prevState) => [...prevState, URL.createObjectURL(img)]);\n    };\n    return (\n      <div className=\"uploadImageWrap\">\n        <label\n          htmlFor=\"contained-button-upload\"\n          className=\"uploadImageButton\"\n          onChange={(e) => handleUpload(e)}\n        >\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            id=\"contained-button-upload\"\n            hidden\n          />\n          <UploadRoundedIcon />\n          <span className=\"uploadImageText\">Upload</span>\n        </label>\n      </div>\n    );\n  };\n\n  const UploadedImages = () => {\n    return uploadedImages?.map((item, i) => (\n      <div className=\"imageContainer\" key={i}>\n        <img\n          src={item}\n          alt=\"\"\n          className=\"itemsImage\"\n          draggable=\"true\"\n          elementcategory={item}\n          onDragStart={(e) => {\n            props.onChangeDragUrl(e.target.src);\n          }}\n          onClick={(e) => {\n            props.handleAddOnClick(e.target.src);\n          }}\n        />\n      </div>\n    ));\n  };\n\n  // check if localstorage is empty, if empty display tooltip instead array of images\n  const checkUploadedImagesNotEmpty = () => {\n    if (uploadedImages.length > 0) {\n      return true;\n    }\n    return false;\n  };\n\n\n  return (\n    <div className=\"itemsSection\">\n      <UploadButton />\n      {checkUploadedImagesNotEmpty() ? (\n        <UploadedImages />\n      ) : (\n        <p className=\"uploadTooltip\">Upload your images with button above.</p>\n      )}\n    </div>\n  );\n}\n\nexport default UploadSection;\n","import React from \"react\";\nimport DownloadRoundedIcon from \"@mui/icons-material/DownloadRounded\";\n\nfunction ShareSection(props) {\n  // function that creates hyperlink with canvas DataURL as href\n  // programically clicks it to download the image\n  // after download hyperlink is being removed from DOM\n    const handleExport = () => {\n      const uri = props.stageRef.current.toDataURL();\n      const link = document.createElement(\"a\");\n      console.log(uri);\n      console.log(link);\n      link.download = \"moodboard-export.png\";\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    };\n\n    return (\n      <div className=\"itemsSection\">\n        <div className=\"shareSectionWrap\">\n          <button onClick={handleExport} className=\"downloadImage\">\n            <DownloadRoundedIcon />\n            Export canvas as image\n          </button>\n        </div>\n      </div>\n    );\n}\n\nexport default ShareSection;","/** @format */\n\nimport React from \"react\";\nimport { tools } from \"../Data/tools\";\n\n// list of tools imported from /Data/tools.js\n\nfunction ToolsBar(props) {\n  return (\n    <div className=\"toolsBarWrap\">\n      <div className=\"toolsBarBody\">\n        <div className=\"toolsItemsWrap\">\n          {tools.map((tool, i) => (\n            <div\n              className=\"toolsItem\"\n              key={i}\n              onClick={() => {\n                props.changeSelectedTool(i);\n              }}\n            >\n              <div className=\"toolsItemContent\">\n                <span className=\"toolIcon\">{tool.icon}</span>\n                <span className=\"toolTitle\">{tool.title}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ToolsBar;\n","/** @format */\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Styles/itemsList.css\";\nimport { tools } from \"../Data/tools\";\n\nimport ImagesSection from \"./ItemsListComponents/ImagesSection\";\nimport BackgroundsSection from \"./ItemsListComponents/BackgroundsSection\";\nimport UploadSection from \"./ItemsListComponents/UploadSection\";\nimport ShareSection from \"./ItemsListComponents/ShareSection\";\nimport ToolsBar from \"./ToolsBar\";\n\nimport ExpandLessRoundedIcon from \"@mui/icons-material/ExpandLessRounded\";\n\nconst ItemsList = (props) => {\n  const [selectedTools, setSelectedTools] = useState(0);\n  // componentsMap keys must be same with components key value in /Data/tools.js\n  const componentsMap = {\n    imagesSection: ImagesSection,\n    backgroundsSection: BackgroundsSection,\n    uploadSection: UploadSection,\n    shareSection: ShareSection,\n  };\n  const [sidebarCollapse, setSidebarCollapse] = useState(true);\n\n  const changeSelectedTool = (id) => {\n    setSelectedTools(id);\n  };\n\n  const openMenuOnClick = () => {\n    sidebarCollapse ? setSidebarCollapse(false) : setSidebarCollapse(true);\n  };\n\n  const handleCanvasResizeOnSidebarChange = () => {\n    props.resizeCanvasOnSidebarChange();\n  };\n\n  // everytime when sidebar state changes function in Canvas.js is being called for resizing canvas dimensions\n  useEffect(() => {\n    handleCanvasResizeOnSidebarChange();\n  }, [sidebarCollapse]);\n\n  return (\n    <div\n      className={`itemsListWrap ${\n        sidebarCollapse ? \"sidebarOpen\" : \"sidebarClosed\"\n      }`}\n    >\n      <div className=\"expandButton\" onClick={() => openMenuOnClick()}>\n        <ExpandLessRoundedIcon />\n      </div>\n      <div className=\"itemsListBody\">\n        <ToolsBar changeSelectedTool={changeSelectedTool} />\n\n        {tools.map((val) => {\n          if (val.id === selectedTools) {\n            const Component = componentsMap[val.component];\n            return (\n              <Component\n                key={val.id}\n                onChangeDragUrl={props.onChangeDragUrl}\n                handleAddOnClick={props.handleAddOnClick}\n                dragUrl={props.dragUrl}\n                addToBackground={props.addToBackground}\n                removeBackground={props.removeBackground}\n                stageRef={props.stageRef}\n              />\n            );\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ItemsList;\n","import React, { useRef, useEffect, Fragment } from 'react';\nimport { Image, Transformer } from \"react-konva\";\nimport useImage from 'use-image';\n\n// image component that contains various event handlers\n// image component is used for passing it to Konva canvas\n\nconst ImageComponent = ({ image, shapeProps, id, isSelected, onSelect, onChange }) => {\n  // creating image based on its src\n  const [img] = useImage(image.src);\n  const shapeRef = useRef();\n  const transformRef = useRef();\n\n  // if selected create box around the image to allow performing resizes\n  useEffect(() => {\n    if (isSelected) {\n      transformRef.current.setNode(shapeRef.current);\n      transformRef.current.getLayer().batchDraw()\n    }\n  }, [isSelected]);\n\n  // if dropped on konva stage pass its attributes like src, width, height, x and y\n  const handleOnDrop = e => {\n    onChange({\n      ...shapeProps,\n      x: e.target.x(),\n      y: e.target.y()\n    });\n  }\n\n  // called when dragging starts image in konva Canvas\n  const handleDragStart = e => {\n    // move dragged images on top\n    onChange({\n      ...shapeProps,\n      x: e.target.x(),\n      y: e.target.y()\n    })\n    onSelect(e);\n    e.target.moveToTop();\n\n\n    // creates shadow around the image\n    e.target.setAttrs({\n      shadowOffset: {\n        x: 0,\n        y: 0\n      },\n      scaleX: 1.05,\n      scaleY: 1.05,\n      shadowBlur: 16,\n      ShadowOpacity: 0.6\n    });\n  };\n\n  // called when dragging ends \n  const handleDragEnd = e => {\n    // clear shadow around the image\n    e.target.to({\n      duration: 0.1,\n      scaleX: 1,\n      scaleY: 1,\n      shadowOffsetX: 0,\n      shadowOffsetY: 4,\n      shadowBlur: 10,\n      ShadowOpacity: 0.4\n    });\n\n    // updates the position\n    onChange({\n      ...shapeProps,\n      x: e.target.x(),\n      y: e.target.y()\n    });\n  };\n\n\n  // called when performed resize\n  const handleTransformOnEnd = e => {\n    // node - refference to image \n    const node = shapeRef.current;\n    const scaleX = node.scaleX();\n    const scaleY = node.scaleY();\n    node.scaleX(1);\n    node.scaleY(1);\n    node.width(Math.max(5, node.width() * scaleX));\n    node.height(Math.max(node.height() * scaleY));\n    onChange({\n      ...shapeProps,\n      x: node.x(),\n      y: node.y(),\n      // set minimal value\n      width: node.width(),\n      height: node.height()\n    });\n  }\n\n  return (\n    <Fragment>\n      <Image\n        image={img}\n        id={id}\n        draggable\n        onDrop={handleOnDrop}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        shadowColor=\"black\"\n        shadowBlur={10}\n        shadowOffsetX={0}\n        shadowOffsetY={4}\n        shadowOpacity={0.6}\n        onTransformEnd={handleTransformOnEnd}\n          />\n      {isSelected && (\n        // when selected it creates box around the image to perform resizes\n            <Transformer\n              ref={transformRef}\n              boundBoxFunc={(oldBox, newBox) => {\n                // limit resize\n                if (newBox.width < 5 || newBox.height < 5) {\n                  return oldBox;\n                }\n                return newBox;\n              }}\n            />\n          )}\n    </Fragment>\n  );\n};\n\nexport default ImageComponent;\n","import React from 'react';\nimport { Rect } from 'react-konva';\nimport useImage from 'use-image';\n\n// Konva way of adding background image to canvas\n// creating Rect Konva component\n// placing it at the bottom of all elements\n// changing its z-index to lowest value\n\nfunction CanvasBackground({ backgroundUrl, width, height }) {\n  // create image of image src\n  const [background] = useImage(backgroundUrl);\n  // calculations to fill the whole area of canvas\n  let widthRatio = 1, heightRatio = 1;\n  if(background !== undefined) {\n    widthRatio = width / background.width;\n    heightRatio = height / background.height;\n  }\n  return (\n    <Rect\n      x={0}\n      y={0}\n      zIndex={-100}\n      width={width}\n      height={height}\n      fillPatternImage={background}\n      fillPatternRepeat={'no-repeat'}\n      fillPatternScaleX={widthRatio}\n      fillPatternScaleY={heightRatio}\n      id=\"canvasBackground\"\n      >\n    </Rect>\n  )\n}\n\nexport default CanvasBackground\n","/** @format */\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport \"./Styles/canvas.css\";\nimport ItemsList from \"./ItemsList\";\nimport ImageComponent from \"./ImageComponent\";\nimport CanvasBackground from \"./CanvasBackground\";\n\nconst Canvas = () => {\n  // static canvas dimensions used for scaling ratio\n  const stageWidth = 2000,\n    stageHeight = 2000;\n  // dynamic canvas dimensions\n  const [stageDimensions, setStageDimensions] = useState({\n    width: stageWidth,\n    height: stageHeight,\n    scale: 1,\n  });\n  // stageRef is used for handling callbacks - example: getting canvas positions after drag and rop\n  const stageRef = useRef();\n  // containerRef is used for dynamic canvas scalling\n  // main purpose of containerRef is to get width of parent div of canvas stage\n  const containerRef = useRef();\n  // dragUrl stores temporary src of dragged image\n  const [dragUrl, setDragUrl] = useState();\n  // images stores images that are added to canvas\n  const [images, setImages] = useState([]);\n  // backgroundImage is used for setting backgroundImage of canvas\n  const [backgroundImage, setBackgroundImage] = useState();\n  // selectedId is used for keeping selected image to handle resizes, z-index priority etc.\n  const [selectedId, setSelectedId] = useState(null);\n\n  // function to handle resize of canvas dimensions based on window width or when sidebar is closed or opened\n  const handleResize = () => {\n    let sceneWidth = containerRef.current.clientWidth;\n    let scale = sceneWidth / stageWidth;\n    setStageDimensions({\n      width: stageWidth * scale,\n      height: stageHeight * scale,\n      scale: scale,\n    });\n  };\n\n  // add eventListener for every window resize to call handleResize function\n  useEffect(() => {\n    handleResize();\n    window.addEventListener(\"resize\", handleResize, false);\n    return () => window.addEventListener(\"resize\", handleResize, false);\n  }, []);\n\n  // if clicked on empty space of canvas, including backgroundImage perform deselect item\n  const checkDeselect = (e) => {\n    const clickedOnEmpty = e.target === e.target.getStage();\n    const clikedOnBackground = e.target.getId() === \"canvasBackground\";\n    if (clickedOnEmpty || clikedOnBackground) {\n      setSelectedId(null);\n    }\n  };\n\n  // when element is dragged pass its image src to allow it for adding it to canvas\n  const onChangeDragUrl = (dragUrl) => {\n    setDragUrl(dragUrl);\n  };\n\n  // update image attributes when performing resize\n  const handleTransformChange = (newAttrs, i) => {\n    let imagesToUpdate = images;\n    let singleImageToUpdate = imagesToUpdate[i];\n    // update old attributes\n    singleImageToUpdate = newAttrs;\n    imagesToUpdate[i] = singleImageToUpdate;\n    setImages(imagesToUpdate);\n  };\n\n  // function to handle adding images on drag and drop to canvas\n  const handleOnDrop = (e) => {\n    e.preventDefault();\n    stageRef.current.setPointersPositions(e);\n    setImages(\n      images.concat([\n        {\n          ...stageRef.current.getPointerPosition(),\n          src: dragUrl,\n        },\n      ])\n    );\n  };\n\n  // function to handle adding images on click\n  const handleAddOnClick = (src) => {\n    let centerX = stageDimensions.width / 2;\n    let centerY = stageDimensions.height / 2;\n    setImages(\n      images.concat([\n        {\n          x: centerX,\n          y: centerY,\n          src: src,\n        },\n      ])\n    );\n  };\n\n  // function to handle adding background image of canvas\n  const addToBackground = (backgroundUrl) => {\n    setBackgroundImage(backgroundUrl);\n  };\n\n  // function to handle removing background image of canvas\n  const removeBackground = () => {\n    setBackgroundImage(null);\n  };\n\n  // used for passing image id to image attributes\n  const passImageWithId = (image, id) => {\n    const imageWithId = {\n      ...image,\n      id: id,\n    };\n    return imageWithId;\n  };\n\n  // when sidebar state changes this function is being called\n  const resizeCanvasOnSidebarChange = () => {\n    // wait for sidebar animation to complete\n    setTimeout(() => {\n      handleResize();\n    }, 420);\n  };\n\n  return (\n    <div className=\"workContainer\">\n      <ItemsList\n        dragUrl={dragUrl}\n        onChangeDragUrl={onChangeDragUrl}\n        handleAddOnClick={handleAddOnClick}\n        addToBackground={addToBackground}\n        removeBackground={removeBackground}\n        resizeCanvasOnSidebarChange={resizeCanvasOnSidebarChange}\n        stageRef={stageRef}\n      />\n\n      <div className=\"canvasWrap\">\n        <div\n          className=\"canvasBody\"\n          ref={containerRef}\n          onDrop={handleOnDrop}\n          onDragOver={(e) => e.preventDefault()}\n        >\n          <Stage\n            width={stageDimensions.width}\n            height={stageDimensions.height}\n            scaleX={stageDimensions.scale}\n            scaleY={stageDimensions.scale}\n            className=\"canvasStage\"\n            ref={stageRef}\n            onMouseDown={(e) => {\n              // deselect when clicked on empty area or background image\n              checkDeselect(e);\n            }}\n          >\n            <Layer>\n              {typeof backgroundImage === \"string\" && (\n                // check if background image is not empty, default state is null\n                <CanvasBackground\n                  backgroundUrl={backgroundImage}\n                  width={stageWidth}\n                  height={stageHeight}\n                />\n              )}\n              {images.map((image, i) => {\n                return (\n                  <ImageComponent\n                    image={image}\n                    shapeProps={passImageWithId(image, `image${i}`)}\n                    id={`image${i}`}\n                    key={i}\n                    isSelected={i === selectedId}\n                    onSelect={() => {\n                      setSelectedId(i);\n                    }}\n                    onChange={(newAttrs) => {\n                      handleTransformChange(newAttrs, i);\n                    }}\n                  />\n                );\n              })}\n            </Layer>\n          </Stage>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Canvas;\n","/** @format */\n\nimport React, { useEffect } from \"react\";\nimport Canvas from \"./Components/Canvas\";\n\nfunction App() {\n  return (\n    <div className=\"bodyWrap\">\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Assets/Styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}